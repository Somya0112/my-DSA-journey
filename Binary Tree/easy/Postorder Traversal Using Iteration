//Using 2 stacks  (T.C=O(N),S.C=O(2N))
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int>postorder;
        if(root==NULL)
        return postorder;

        stack<TreeNode*>s1,s2;
        s1.push(root);
        
        while(!s1.empty())
        {
            root=s1.top();
            s1.pop();
            s2.push(root);
            if(root->left!=NULL)
            s1.push(root->left);
            if(root->right!=NULL)
            s1.push(root->right);
        } 
        while(!s2.empty())
        {
           postorder.push_back(s2.top()->val);
           s2.pop();
        }
        return postorder;
    }
};




//Using 1 stack  (T.C=O(N),S.C=O(N))
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root)
    {
        vector<int>postorder;
        if(root==NULL)
        return postorder;

        stack<TreeNode*>s1;
        while(root!=NULL|| !s1.empty())
        {
           if(root!=NULL)
           {
               s1.push(root);
               root=root->left;
           }
           else
           {
               TreeNode* temp=s1.top()->right;
               if(temp==NULL)
               {
                   temp=s1.top();
                   s1.pop();
                   postorder.push_back(temp->val);
                   while (!s1.empty() && temp == s1.top() -> right) {
                   temp = s1.top();
                   s1.pop();
                   postorder.push_back(temp ->val);
                }
               }
                else
                {
                root=temp;
                 }
            }
        }
        return postorder;
    }
};
