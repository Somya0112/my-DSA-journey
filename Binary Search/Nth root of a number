//Brute(T.C=O(M) where M = the given number,S.C=O(1))
long long func(int b, int exp) {
    long long  ans = 1;
    long long base = b;
    while (exp > 0) {
        if (exp % 2) {
            exp--;
            ans = ans * base;
        }
        else {
            exp /= 2;
            base = base * base;
        }
    }
    return ans;
}

int NthRoot(int n, int m) {
    //Use linear search on the answer space:
    for (int i = 1; i <= m; i++) {
        long long val = func(i, n);
        if (val == m * 1ll) return i;
        else if (val > m * 1ll) break;
    }
    return -1;
}








//Optimal  (T.C=O(2*logN)~O(logN),S.C=O(1))
int findPower(int mid,int n,int m)
{
   //return 0 if <m
   //return 1 if ==m
   //return 2 if >m
  long long ans=1;
  for(int i=1;i<=n;i++)
  {
    ans=ans*mid;
    if(ans>m)
    return 2;
  }
  if(ans==m) return 1;
  return 0;
}


int NthRoot(int n, int m) {
  // Write your code here.
   int low=1,high=m;
   while(low<=high)
   {
     int mid=(low+high)/2;
     int findMid=findPower(mid,n,m);
     if(findMid==1)
     {
       return mid;
     }
     else if(findMid==2)
     high=mid-1;
     else
     low=mid+1;
   }
   return -1;
}
