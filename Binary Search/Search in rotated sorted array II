//Brute(T.C=O(N),S.C=O(1))
bool searchInARotatedSortedArrayII(vector<int>&arr, int k) {
    int n = arr.size(); // size of the array.
    for (int i = 0; i < n; i++) {
        if (arr[i] == k) return true;
    }
    return false;
}

//Optimal(Time Complexity: O(logN) for the best and average case. O(N/2) for the worst case. Here, N = size of the given array.,S.C=O(1))
class Solution {
public:
    bool search(vector<int>& nums, int target) 
     {
         int n=nums.size()-1;
         int low=0;
         int high=n;
         while(low<=high)
         {
             int mid=(low+high)/2;
             if(nums[mid]==target)
             return true;

             if(nums[low]==nums[mid]&&nums[mid]==nums[high])
             {
                 low=low+1;
                 high=high-1;
                 continue;
             }

             if(nums[low]<=nums[mid])
             {
                 if(nums[low]<=target&&target<nums[mid])
                 high=mid-1;
                 else
                 low=mid+1;
             }
             else
             {
                 if(nums[mid]<target&&target<=nums[high])
                 low=mid+1;
                 else
                 high=mid-1;
                 
             }
         }
         return false;
    }        
    
};
