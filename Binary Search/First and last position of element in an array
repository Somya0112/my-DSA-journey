//Brute(Linear Search,T.C=O(N),S.C=O(1))
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target)
    {
        int start=-1,last=-1;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==target)
            {
                start=i;
                break;
            }
        }
        for(int i=n-1;i>=0;i--)
        {
            if(nums[i]==target)
            {
                last=i;
                break;
            }
        }

        return {start,last};
    }
};


//Optimal1(T.C=O(logN),S.C=O(1))
class Solution {
public:
    int lowerbnd(vector<int>& nums,int n, int target)
    {
        int low=0,high=n-1;
        int ans=n;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]>=target)
            {
                ans=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)
            high=mid-1;
            else 
            low=mid+1;
        }
        return ans;
    }

    int upperbnd(vector<int>& nums,int n, int target)
    {
        int low=0,high=n-1;
        int ans=n;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]>target)
            {
                ans=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)
            high=mid-1;
            else 
            low=mid+1;
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int lb=lowerbnd(nums,n,target);
        if(lb==n||nums[lb]!=target)
        return {-1,-1};
        int ub=upperbnd(nums,n,target);
        return {lb,ub-1};
    }
};


//Optimal2(T.C=O(logN),S.C=O(1))
class Solution {
public:
    int firstoccur(vector<int>& nums,int n, int target)
    {
        int low=0,high=n-1;
        int first=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                first=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)
            high=mid-1;
            else 
            low=mid+1;
        }
        return first;
    }

    int lastoccur(vector<int>& nums,int n, int target)
    {
        int low=0,high=n-1;
        int last=-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]>target)
            high=mid-1;
            else 
            low=mid+1;
        }
        return last;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int first=firstoccur(nums,n,target);
        if(first==-1)
        return {-1,-1};
        int last=lastoccur(nums,n,target);
        return {first,last};
    }
};
