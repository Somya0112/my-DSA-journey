//Brute(T.C=O(M*N),S.C=O(1))
    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        int n=matrix.size();
        int m=matrix[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==target)
                return true;
            }
        }
        return false;
    }


//Better(T.C=O(N*logM),S.C=O(1))
    bool binary(vector<int>arr,int target)
    {
        int n=arr.size();
        int low=0,high=n-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr[mid]==target)
            return true;
            else if(arr[mid]>target)
            high=mid-1;
            else
            low=mid+1;
        }
        return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        int n=matrix.size();
        if(n==0)
        return false;
        for(int i=0;i<n;i++)
        {
            if(binary(matrix[i],target));
            return true;
        }
        return false;
    }



//Optimal(T.C=O(N+M),S.C=O(1))
    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        int n=matrix.size();
        int m=matrix[0].size();
        int row=0,col=m-1;
        while(row<n && col>=0)
        {
            if(matrix[row][col]==target)
            {
                return true;
            }
            else if(matrix[row][col]<target)
            row++;
            else
            col--;
        }
        return false;  
    }

