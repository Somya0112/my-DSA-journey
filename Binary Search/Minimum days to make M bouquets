//Brute( T.C=O((max(arr[])-min(arr[])+1) * N), where {max(arr[]) -> maximum element of the array, min(arr[]) -> minimum element of the array,
N = size of the array}. S.C=O(1))
class Solution {
public:
    bool possible(vector<int>&nums,int day,int m,int k)
    {
        int cnt=0,bouq=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
           if(nums[i]<=day)
           {
               cnt++;
           }
           else
           {
               bouq+=(cnt/k);
               cnt=0;
           }
        }
        bouq+=(cnt/k);
        return bouq>=m;
    }

    int minDays(vector<int>& nums, int m, int k)
    {
        long long val=(long long)m*(long long)k;
        int n=nums.size();
        if(val>n)
        return -1;
        int mini=INT_MAX,maxi=INT_MIN;
        for(int i=0;i<n;i++)
        {
           mini=min(mini,nums[i]);
           maxi=max(maxi,nums[i]);
        }

        for(int i=mini;i<=maxi;i++)
        {
            if(possible(nums,i,m,k))
            {
                return i;
            }
        }
        return -1;
    }
};



//Optimal(T.C=O(log(max(arr[])-min(arr[])+1) * N),S.C=O(1) )
class Solution {
public:
    bool possible(vector<int>&nums,int day,int m,int k)
    {
        int cnt=0,bouq=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
           if(nums[i]<=day)
           {
               cnt++;
           }
           else
           {
               bouq+=(cnt/k);
               cnt=0;
           }
        }
        bouq+=(cnt/k);
        return bouq>=m;
    }

    int minDays(vector<int>& nums, int m, int k)
    {
        long long val=(long long)m*(long long)k;
        int n=nums.size();
        if(val>n)
        return -1;
        int mini=INT_MAX,maxi=INT_MIN;
        for(int i=0;i<n;i++)
        {
           mini=min(mini,nums[i]);
           maxi=max(maxi,nums[i]);
        }

        int low=mini,high=maxi,ans=high;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(possible(nums,mid,m,k))
            {
                 ans=mid;
                 high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans; 
    }
};
