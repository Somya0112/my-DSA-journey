//Brute(T.C=O(N^3),S.C=O(1))

bool check(string &s, int i, int j){  
        while(i<j){
            if(s[i] != s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }  

    string longestPalindrome(string s)
    {
        int n=s.size();
        int start=0;
        int max_len=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++){
                if(check(s,i,j))
                {
                    if(j-i+1>max_len)
                    {
                        max_len=j-i+1;
                        start=i;
                    }
                }
            }
        }
        return s.substr(start,max_len);
    }



//T.C=O(N^2),S.C=O(1)
string longestPalindrome(string s) {
        string res = "";
        for(int i = 0; i < s.length(); i++){
            string temp = helper(s, i, i);
            if(temp.length() > res.length()){
                res = temp;
            }
            temp = helper(s, i, i+1);
            if(temp.length() > res.length()){
                res = temp;
            }
        }
        return res;
    }
    string helper(string s, int l, int r){
        while(l >= 0 && r < s.length() && s[l] == s[r]){
            l -= 1;
            r += 1;
        }
        return s.substr(l+1, r-l-1);
    }
