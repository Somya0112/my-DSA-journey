//Brute(T.C=O(N^2),S.C=O(1))
int largestRectangleArea(vector<int>& heights) 
    {
        int maxarea=0;
        int n=heights.size();
        for(int i=0;i<n;i++)
        {
           int minht=INT_MAX;
           for(int j=i;j<n;j++)
           {
               minht=min(heights[j],minht);
               maxarea=max(maxarea,minht*(j-i+1));
           }
        }
        return maxarea;
    }


//Optimized Soln 1(T.C=O(N),S.C=O(3N))
int largestRectangleArea(vector<int>& heights)
    {
        int n=heights.size();
        stack<int>st;
        int left[n],right[n];

        for(int i=0;i<n;i++)
        {
        while(!st.empty()&&heights[st.top()]>=heights[i])
        st.pop();

        if(st.empty())
        left[i]=0;
        else
        left[i]=st.top()+1;

        st.push(i); 
        }

        while(!st.empty())
        st.pop();

        for(int i=n-1;i>=0;i--)
        {
        while(!st.empty()&&heights[st.top()]>=heights[i])
        st.pop();

        if(st.empty())
        right[i]=n-1;
        else
        right[i]=st.top()-1;

        st.push(i); 
        }

        int maxi=0;
        for(int i=0;i<n;i++)
        {
            maxi=max(maxi,heights[i]*(right[i]-left[i]+1));
        }

        return maxi;

    }

//Optimal Soln 2(T.C=O(N),S.C=O(N))
int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        stack<int>st;
        int mx=0;
        for(int i=0;i<=n;i++)
        {
           while(!st.empty()&&(i==n||heights[st.top()]>=heights[i]))
           {
               int height=heights[st.top()];
               st.pop();
               int width;
               if(st.empty())
               width=i;
               else
               width=i-st.top()-1;

               mx=max(mx,width*height);
           } 
           st.push(i);
        }
        
        return mx;
    }

