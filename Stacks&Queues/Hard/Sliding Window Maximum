//Brute(T.C=O(N^2),S.C=O(k))
void getmax(vector<int>nums,int l,int r,vector<int>&arr)
    {
        int i,maxi=INT_MIN;
        for(i=l;i<=r;i++)
        {
            maxi=max(maxi,nums[i]);
        }
        arr.push_back(maxi);
    }

    vector<int> maxSlidingWindow(vector<int>& nums, int k)
     {
         vector<int>ans;
         int left=0, right=0,i,j;
         while(right<k-1)
         {
             right++;
         }
         
         while(right<nums.size())
         {
             getmax(nums,left,right,ans);
             left++;
             right++;
         }
        
        return ans;
    }


//Optimal(T.C=O(N),S.C=O(K))  Using Deque
vector<int> maxSlidingWindow(vector<int>& nums, int k)
{
        deque<int>dq;
        vector<int>ans;
        for(int i=0;i<nums.size();i++)
        {
            while(!dq.empty()&&dq.front()==i-k)
            dq.pop_front();

            while(!dq.empty()&&nums[dq.back()]<nums[i])
            dq.pop_back();

            dq.push_back(i);

            if(i>=k-1)
            ans.push_back(nums[dq.front()]);
        }
        return ans;
  }
