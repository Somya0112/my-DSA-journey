//Brute(T.C=O(1),S.C=O(2N))
class MinStack {
    stack<pair<int,int>>st;
public:
    MinStack() {
        
    }
    
    void push(int val) {
        int mini;
        if(st.empty())
        mini=val;
        else
        {
            mini=min(val,st.top().second);
        }
        st.push({val,mini});
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};



//Optimal(T.C=O(1),S.C=O(N))
class MinStack {
    stack<long long>st;
    long long mini;
public:
    MinStack() {
        mini=INT_MAX;
    }
    
    void push(int val) {
        long long value=val;
        if(st.empty())
        {
            mini=val;
            st.push(value);
        }
        else
        {
            if(val<mini)
            {
                st.push(2*value-mini);
                mini=value;
            }
            else
            {
                st.push(value);
            }
        }
    }
    
    void pop() {
        if(st.empty())
        {
            return;
        }
        long long el=st.top();
        st.pop();

        if(el<mini)
        {
            mini=2*mini-el;
        }
        
    }
    
    int top() {
        if(st.empty())
        return -1;

        long long el=st.top();
        if(el<mini)
        return mini;
        else
        return el;
        
    }
    
    int getMin() {
        return mini;
    }
};
