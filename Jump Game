//solution1 : Optimal(Valley peak approach)

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        int reachable=0;
        for(int i=0;i<nums.size();i++)
        {
            if(reachable<i)
            return false;

            reachable=max(reachable,i+nums[i]);
        }
        return true;
        
    }
};


//solution2 : Optimal(Greedy approach)

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n =nums.size();
        int index=n-1;
        for(int i=n-1;i>=0;i--)
        {
            if(i+nums[i]>=index)
            index=i;
        }
        if(index==0) return true;
        return false;
        
    }
};
