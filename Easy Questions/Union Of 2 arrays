//Brute(Time Compleixty : O((m+n)log(m+n)), Space Complexity : O(m+n))
vector < int > FindUnion(int arr1[], int arr2[], int n, int m) {
  set < int > s;
  vector < int > Union;
  for (int i = 0; i < n; i++)
    s.insert(arr1[i]);
  for (int i = 0; i < m; i++)
    s.insert(arr2[i]);
  for (auto & it: s)
    Union.push_back(it);
  return Union;
}

//Optimal (Time Complexity: O(m+n),Space Complexity : O(m+n) {If Space of Union ArrayList is considered} O(1) {If Space of union ArrayList is not considered})

vector < int > sortedArray(vector < int > arr1, vector < int > arr2) {
  int i = 0, j = 0; 
  int n=arr1.size();
  int m=arr2.size();
  vector < int > Union; 
  while (i < n && j < m) {
    if (arr1[i] <= arr2[j]) 
    {
      if (Union.size() == 0 || Union.back() != arr1[i])
        Union.push_back(arr1[i]);
      i++;
    } else
    {
      if (Union.size() == 0 || Union.back() != arr2[j])
        Union.push_back(arr2[j]);
      j++;
    }
  }
  while (i < n) 
  {
    if (Union.back() != arr1[i])
      Union.push_back(arr1[i]);
    i++;
  }
  while (j < m)
  {
    if (Union.back() != arr2[j])
      Union.push_back(arr2[j]);
    j++;
  }
  return Union;   
    
}


