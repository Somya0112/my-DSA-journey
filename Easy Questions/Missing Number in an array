//Brute Solution1 (Time Complexity: O(N2),Space Complexity: O(1))
int missingNumber(vector<int>&a, int N) {
    for (int i = 1; i <= N; i++) {
        int flag = 0;
        for (int j = 0; j < N - 1; j++) {
            if (a[j] == i) {
                flag = 1;
                break;
            }
        }
        if (flag == 0) return i;
    }
    return -1;
}



//Brute Solution2 (Time Complexity: O(N) + O(N) ~ O(2*N),Space Complexity: O(N))
int missingNumber(vector<int>&a, int N) {

    int hash[N + 1] = {0}; //hash array

    // storing the frequencies:
    for (int i = 0; i < N - 1; i++)
        hash[a[i]]++;

    //checking the freqencies for numbers 1 to N:
    for (int i = 1; i <= N; i++) {
        if (hash[i] == 0) {
            return i;
        }
    }
return -1;
}



//Optimal Solution1 (Time Complexity: O(N),Space Complexity: O(1))
int missingNumber(vector<int>&a, int N) {

    //Summation of first N numbers:
    int sum = (N * (N + 1)) / 2;

    //Summation of all array elements:
    int s2 = 0;
    for (int i = 0; i < N - 1; i++) {
        s2 += a[i];
    }

    int missingNum = sum - s2;
    return missingNum;
}



//Optimal Solution2 (Time Complexity: O(N),Space Complexity: O(1))
int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    int xor1=0;
    int xor2=0;
    for(int i=0;i<N-1;i++)
    {
        xor2=xor2^a[i];
        xor1=xor1^(i+1);
    }
    xor1=xor1^N;
    return xor1^xor2;
}
