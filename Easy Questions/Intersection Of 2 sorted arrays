//Brute (Time Complexity: O(n1 x n2) ~ O(n^2),Space Complexity: O(n))
vector<int> intersectionOfArrays(vector<int>A, vector<int>B){  
  vector <int> ans;
  vector <int> visited(B.size(), 0);  
  int i = 0, j = 0;
  for (i = 0; i < A.size(); i++) {   
    for (j = 0; j < B.size(); j++) {
      if (A[i] == B[j] && visited[j] == 0) { 
        ans.push_back(B[j]);
        visited[j] = 1;
        break;
      } 
      else if (B[j] > A[i]) break; 
      //because array is sorted , element will not be beyond this
    }
  } 
  return ans;   
}


//Optimal(T.C=O(N),S.C=O(1))
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	int i=0;int j=0;
	vector<int>ans;
	while(i<n && j<m)
	{
		if(arr1[i]==arr2[j])
		{
		   ans.push_back(arr1[i]);
		   i++;
		   j++;	
		}
		else if(arr1[i]<arr2[j])
		{
		    i++;	
		}
		else
		{
			j++;
		}
		
	}
	return ans;
}
